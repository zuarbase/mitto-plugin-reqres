# -*- coding: utf-8 -*-
#
############################################################################
#
# Note: the canonical version of this file exists in `docs`.  Versions
# in `mitto/docs/src` and `mitto/docs/srcp` are symbolic links to the
# canonical version.
#
############################################################################
#
# Configuration file for the Sphinx documentation builder.
#
# This file is generated by cookiecutter.  Jinja templates should
# be changed there.  See mitto-documentation/cookiecutter/repo
#
# For a full list of Sphinx options, see:
# http://www.sphinx-doc.org/en/master/config

# -- Path setup --------------------------------------------------------------
#
# If extensions (or modules to be documented with autodoc) are in another
# directory, add these directories to sys.path here. If the directory is
# relative to the documentation root, use os.path.abspath to make it absolute,
# like shown here.
#
import importlib
import pathlib
import sys

plugin_name = 'mitto-plugin-reqres'
plugin_module = 'reqres'

# What the Sphinx config calls a 'project' is the name of the plugin.
# 'package' is the plugin's Python package that can be imported.
project = plugin_name
package = plugin_module

repos = pathlib.Path().absolute().parent.parent.parent
sys.path.insert(0, str(repos / "mitto"))
sys.path.insert(0, str(repos / project))
sys.path.insert(0, str(pathlib.Path().absolute()))

MARKDOWN_M2R = "m2r2"
MARKDOWN_RECOMMONMARK = "recommonmark"
# Controls which markdown processor is used
MARKDOWN_PROCESSOR = MARKDOWN_M2R

# -- Package information -----------------------------------------------------

from mitto import __MAINTAINER__

copyright = '(C) 2018-2022 ' + __MAINTAINER__
author =  __MAINTAINER__

project_package = importlib.import_module(package)
__VERSION__ = project_package.__VERSION__

# The short X.Y version
version = __VERSION__
# The full version, including alpha/beta/rc tags
release = __VERSION__


# -- General configuration ---------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
#
needs_sphinx = '3.4'

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
extensions = [
    MARKDOWN_PROCESSOR,
    'sphinx.ext.autodoc',
    'sphinx.ext.doctest',
    'sphinx.ext.napoleon',
    'sphinx.ext.todo',
    # N.B.: viewcode causes source code to be published in build/html/_modules
    # 'sphinx.ext.viewcode',
    'sphinx_togglebutton',
    'sphinxcontrib.mermaid',
    'sphinxcontrib.programoutput',
    'sphinxcontrib.programoutput',
    'sphinx_tabs.tabs',
    'sphinx-jsonschema',
    'sphinx-prompt',
    'sphinx-pydantic',
    'sphinx_autodoc_typehints',
    'sphinx_markdown_tables',    # requires recommonmark, not m2r?
    'sphinx_copybutton',
]

# Add any paths that contain templates here, relative to this directory.
# Due to `../`, both `src` and `srcp` use the same templates.
templates_path = ['../_templates']

# The suffix(es) of source filenames.
# You can specify multiple suffix as a list of string:
#
source_suffix = {
    '.rst': 'restructuredtext',
    '.md': 'markdown',
}

# The master toctree document.
master_doc = 'index'

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#
# This is also used if you do content translation via gettext catalogs.
# Usually you set "language" from the command line for these cases.
language = None

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
# This pattern also affects html_static_path and html_extra_path.
exclude_patterns = []

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = None


# -- Options for HTML output -------------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
#

import sphinxbootstrap4theme

html_theme = 'sphinxbootstrap4theme'
html_theme_path = [sphinxbootstrap4theme.get_path()]

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
#

# Ref: https://github.com/myyasuda/sphinxbootstrap4theme
html_theme_options = {
    "navbar_style": "fixed-top",
    "navbar_show_pages": False,
    # Title shown for "Pages" pulldown
    "navbar_pages_title": "Sections",
    # Links will appear in navbar after "Pages" pulldown
    "navbar_links": [
        ("Mitto Help", "https://www.zuar.com/help/mitto", True),
        ("Mitto API", "https://www.zuar.com/api/mitto", True),
    ],
    # Width of document + sidebar
    "main_width": "90%",
}

html_theme_options = dict()

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
#
# The `../_static` means that `mitto/docs/_static` will be used and shared
# between both `src` and `srcp`.
html_static_path = ['../_static']
html_css_files = ['css/style.css']

# Custom sidebar templates, must be a dictionary that maps document names
# to template names.
#
# The default sidebars (for documents that don't match any pattern) are
# defined by theme itself.  Builtin themes are using these templates by
# default: ``['localtoc.html', 'relations.html', 'sourcelink.html',
# 'searchbox.html']``.
#

html_sidebars = {}

html_copy_source = True
html_show_sourcelink = True
html_show_sphinx = False

# -- Options for HTMLHelp output ---------------------------------------------

# Output file base name for HTML help builder.
htmlhelp_basename = project


# -- Options for LaTeX output ------------------------------------------------

latex_elements = {
    # The paper size ('letterpaper' or 'a4paper').
    #
    'papersize': 'letterpaper',

    # The font size ('10pt', '11pt' or '12pt').
    #
    'pointsize': '10pt',

    # Additional stuff for the LaTeX preamble.
    #
    # 'preamble': '',

    # Latex figure (float) alignment
    #
    # 'figure_align': 'htbp',
}

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title,
#  author, documentclass [howto, manual, or own class]).
latex_documents = [
    (master_doc,
     f'{project}.tex',
     f'{project} Documentation',
     __MAINTAINER__,
     'manual',
    ),
]


# -- Sphinx Extension configuration -------------------------------------------

# -- Options for todo extension -----------------------------------------------

# If true, `todo` and `todoList` produce output, else they produce nothing.
todo_include_todos = True

# -- Options for autodoc extension --------------------------------------------
autodoc_default_options = {
    "members": None,   # None=='yes', include members
    "member-order": "bysource",
    # "special-members": None,
    "undoc-members": None,
    # "exclude_members": '__annotations__, __dict__, __module__, __weakref__',
}
autoclass_content = "both"

# These will get stubbed out so they don't cause import errors.
autodoc_mock_imports = [
    # "mitto",
    # "rocksdb",
    # "tenacity",
]


# -- Options for napoleon extension -------------------------------------------
# Please be very careful changing these.  Simple changes can profoundly
# affect output in non-obvious ways.
napoleon_google_docstring = True
napoleon_include_init_with_doc = False
# napoleon_include_private_with_doc = True
# napoleon_include_special_with_doc = True
napoleon_use_ivar = True


# -- Options for sphinx-autodoc-typehints extension ---------------------------
# set_type_checking_flag = True


# -- Options for confluencebuilder extension ----------------------------------
# confluence_publish = True
# (for confluence cloud)
# confluence_server_url = 'https://zuarkb.atlassian.net/wiki'
# confluence_server_user = 'user@zuar.com'
# confluence_server_pass = 'password'
# confluence_space_name = '~123456789'
# confluence_parent_page = 'Mitto Documentation'
# confluence_page_hierarchy = True
# confluence_purge = True
# confluence_max_depth = 4


# -- Options for m2r extension ---------------------------------------

def setup_recommonmark(app):
    """
    Use one of setup_recommonmark and setup_m2r
    """

    from recommonmark.transform import AutoStructify

    print("*** Markdown processor: recommonmark ***")

    app.add_config_value(
        'recommonmark_config', {
            'url_resolver': lambda url: github_doc_root + url,
            'auto_toc_tree_section': 'Contents',
            'enable_eval_rst': True,
            }, True)
    app.add_transform(AutoStructify)


def setup_m2r(app):
    """
    Use one of setup_recommonmark and setup_m2r
    """
    global m2r_parse_relative_links
    global m2r_anonymous_references
    global m2r_disable_inline_math
    global m2r_no_underscore_emphasis

    print("*** Markdown processor: m2r2 ***")

    m2r_parse_relative_links   = True
    # m2r_anonymous_references   = False
    # m2r_disable_inline_math    = False
    # m2r_no_underscore_emphasis = False

# -- Theme Options ------------------------------------------------------------

def setup_theme(app):
    app.add_css_file("css/style.css")

# -- Apply Setup --------------------------------------------------------------

def setup(app):

    if MARKDOWN_PROCESSOR == MARKDOWN_M2R:
        setup_m2r(app)
    elif MARKDOWN_PROCESSOR == MARKDOWN_RECOMMONMARK:
        setup_recommonmark(app)
    else:
        raise("invalid Markdown processor specified")
    setup_theme(app)
